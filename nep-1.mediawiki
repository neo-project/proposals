<pre>
  NEP: 1
  Title: NEP Purpose and Guidelines
  Author: Erik Zhang <erik@neo.org>
  Type: Meta
  Status: Active
  Created: 2017-8-3
</pre>

==What is a NEP?==

NEP stands for NEO Enhancement Proposal. An NEP is a design document providing information to the NEO community, or describing a new feature for NEO or its processes or environment. The NEP should provide a concise technical specification of the feature and a rationale for the feature. The NEP author is responsible for building consensus within the community and documenting dissenting opinions.

==NEP Rational==

We intend NEPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into NEO. Because the NEPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For NEO implementers, NEPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the NEPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

==NEP Types==

There are three types of NEP:

*A '''Standards Track''' NEP describes any change that affects most or all NEO implementations, such as a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using NEO.

*An '''Informational''' NEP describes a NEO design issue, or provides general guidelines or information to the NEO community, but does not propose a new feature. Informational NEPs do not necessarily represent a NEO community consensus or recommendation, so users and implementors are free to ignore Informational NEPs or follow their advice.

*A '''Meta''' NEP describes a process surrounding NEO or proposes a change to (or an event in) a process. Meta NEPs are like Standards Track NEPs but apply to areas other than the NEO protocol itself. They may propose an implementation, but not to NEO's codebase; they often require community consensus; unlike Informational NEPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in NEO development.

==NEP Work Flow==

The NEP process begins with a new idea for NEO. It is highly recommended that a single NEP contain a single key proposal or new idea. The more focused the NEP, the more successful it tends to be. A change to one client doesn't require a NEP; a change that affects multiple clients, or defines a standard for multiple apps to use, does. The NEP editor reserves the right to reject NEP proposals if they appear too unfocused or too broad. If in doubt, split your NEP into several well-focused ones.

Each NEP must have a champion - someone who writes the NEP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.

Vetting an idea publicly before going as far as writing an NEP is meant to save the potential author time. Asking the NEO community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where NEO is used. Examples of appropriate public forums to gauge interest around your NEP include [https://www.reddit.com/r/NEO the NEO subreddit], [https://github.com/neo-project/proposals/issues the Issues section of this repository], and [https://discord.io/neo the NEO Discord]. In particular, [https://github.com/neo-project/proposals/issues the Issues section of this repository] is an excellent place to discuss your proposal with the community and start creating more formalized language around your NEP.

Once the champion has asked the NEO community whether an idea has any chance of acceptance a draft NEP should be presented as a pull request. This gives the author a chance to continuously edit the draft NEP for proper formatting and quality. This also allows for further public comment and the author of the NEP to address concerns about the proposal.

If the NEP collaborators approve, the NEP editor will assign the NEP a number, label it as Standards Track, Informational, or Meta, give it status "Draft", and add it to the git repository. The NEP editor will not unreasonably deny an NEP. Reasons for denying NEP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the NEO philosophy.

Standards Track NEPs consist of three parts, a design document, implementation, and finally if warranted an update to the formal specification. The NEP should be reviewed and accepted before an implementation is begun, unless an implementation will aid people in studying the NEP. Standards Track NEPs must include an implementation -- in the form of code, a patch, or a URL to some -- before it can be considered Final.

For an NEP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

Once a NEP has been accepted, the implementations must be completed. When the implementation is complete and accepted by the community, the status will be changed to "Final".

A NEP can also be assigned status "Deferred". The NEP author or editor can assign the NEP this status when no progress is being made on the NEP. Once a NEP is deferred, the NEP editor can re-assign it to draft status.

A NEP can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

NEPs can also be superseded by a different NEP, rendering the original obsolete.

The possible paths of the status of NEPs are as follows:

[[Image:nep-1/process.png|NEP Process]]

Some Informational and Meta NEPs may also have a status of "Active" if they are never meant to be completed. E.g. NEP 1 (this NEP).

==What belongs in a successful NEP?==

Each NEP should have the following parts:

*Preamble -- [https://tools.ietf.org/html/rfc822 RFC 822] style headers containing meta-data about the NEP, including the NEP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

*Abstract -- a short (~200 words) description of the technical issue being addressed.

*Motivation (*optional) -- The motivation is critical for NEPs that want to change the NEO protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the NEP solves. NEP submissions without sufficient motivation may be rejected outright.

*Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current NEO platforms.

*Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

*Backwards Compatibility -- All NEPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The NEP must explain how the author proposes to deal with these incompatibilities. NEP submissions without a sufficient backwards compatibility treatise may be rejected outright.

*Test Cases -- Test cases for an implementation are mandatory for NEPs that are affecting consensus changes. Other NEPs can choose to include links to test cases if applicable.

*Implementations -- The implementations must be completed before any NEP is given status "Final", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

==NEP Formats and Templates==

NEPs should be written in [https://www.mediawiki.org/wiki/Help:Contents mediawiki] or [https://help.github.com/articles/basic-writing-and-formatting-syntax/ markdown] format. Image files should be included in a subdirectory for that NEP.

===NEP Header Preamble===

Each NEP must begin with an [https://tools.ietf.org/html/rfc822 RFC 822] style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  NEP: <NEP number>(this is determined by the NEP editor)
  Title: <NEP title>
  Author: <list of authors' real names and optionally, email address>
 *Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected | Withdrawn | Final | Superseded>
  Type: <Standard | Informational | Meta>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
 *Replaces: <NEP numbers>
 *Superseded-By: <NEP number>
 *Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the NEP. The format of the Author header value must be

<pre>
  Random J. User <address@dom.ain>
</pre>

if the email address is included, and just

<pre>
  Random J. User
</pre>

if the email address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track NEPs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the NEP is made.

While a NEP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the NEP is being discussed. No Discussions-To header is necessary if the NEP is being discussed privately with the author.

The Type header specifies the type of NEP: Standard, Informational, or Meta.

The Created header records the date that the NEP was assigned a number. It should be in yyyy-mm-dd format, e.g. 2001-08-14.

NEPs may have a Requires header, indicating the NEP numbers that this NEP depends on.

NEPs may also have a Superseded-By header indicating that a NEP has been rendered obsolete by a later document; the value is the number of the NEP that replaces the current document. The newer NEP must have a Replaces header containing the number of the NEP that it rendered obsolete.

===Auxiliary Files===

NEPs may include auxiliary files such as diagrams. Such files must be included in a subdirectory for that NEP and be named nep-x-y.ext, where "x" is the NEP number, "y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring NEP Ownership==

It occasionally becomes necessary to transfer ownership of NEPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred NEP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the NEP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the NEP. We try to build consensus around a NEP, but if that's not possible, you can always submit a competing NEP.

If you are interested in assuming ownership of a NEP, send a message asking to take over, addressed to both the original author and the NEP editor. If the original author doesn't respond to email in a timely manner, the NEP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==NEP Editors==

The current NEP editor is

*Fernando Díaz Toledano (@shargon)

==NEP Editor Responsibilities & Workflow==

For each new NEP that comes in, an editor does the following:

*Read the NEP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.

*The title should accurately describe the content.

*Edit the NEP for language (spelling, grammar, sentence structure, etc.), markup (Github flavored Markdown), code style

If the NEP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the NEP is ready for the repository, the NEP editor will:

*Assign a NEP number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141) in the pull request comments.

*Merge the pull request when the author is ready (allowing some time for further peer review).

*List the NEP in [[README.mediawiki]]

*Send a message back to the NEP author with next steps.

The NEP editors are intended to fulfill administrative and editorial responsibilities. The NEP editors monitor NEP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

==History==

This document was derived heavily from [https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki Bitcoin's BIP-0001] written by Amir Taaki which in turn was derived from [https://www.python.org/dev/peps/pep-0001/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the NEO improvement process, and should not be bothered with technical questions specific to NEO or the NEP process. Please direct all comments to the NEP editors.
