<pre>
  NEP: NEP-[number to be assigned]
  Title: Composable Smart Contracts
  Author: Michael Herman (mwheran@parallelspace.net) aka @mwerman2000, Joe Stewart (hal0x2328@splyse.tech) aka @hal0x2328#2328 
  Type: Standard
  Status: Draft
  Created: 2018-04-17
  Requires (*optional): None
  Replaces (*optional): None
</pre>

==Abstract==

Several projects have extended the NEP-5 required operations and methods in their project's smart contracts 
and are proposing (or about to propose) these additional operations and methods as extensions to NEP-5. 
NEP-[number to be assigned] proposes a solution to this scenario (as well as non-NEP-5 scenarios) 
where a smart contract supports
extensions to an existing NEP. Conforming to NEP-[number to be assigned] involves implementing 
a single required, constant-valued operation and method <code>supportedStandards</code> and possibly creating one or more new NEPs to define
the new operations and methods.

==Motivation==

Several projects have extended the NEP-5 required operations and methods in their project's smart contracts 
and are proposing (or about to propose) these additional operations and methods as extensions to NEP-5.
Currently, there is no end-to-end solution for handling this scenario.
Most often this manifests itself as a smart contract wanting to support the required operations and methods of 
an existing NEP plus one or more additional draft, accepted, or final NEPs.
It is imperative that off-chain client applications be able to know if a smart contract supports a particular set 
of required operations and methods represented by a particular NEP (or other standard) ...or not.
This capability is critical for user applications as well as exchanges, trading platforms and virtually any application that
calls into a smart contract.
A simple direct solution for this scenario is for smart contracts conforming to NEP-[number to be assigned] 
to implement single, constant-valued operation and method called <code>supportedStandards</code> and possibly creating one or more new NEPs to define
the new operations and methods.


==Specification==

In the operation and method definitions below, we provide both the definitions of the operations and methods 
as they are defined in the smart contract as well as the invoke parameters.

This NEP defines one method type:

* '''(Required)''' : operations and methods that are present in all smart contracts that conform to this NEP.

===Methods===

====supportedStandards====

* Syntax: <code>public static string supportedStandards()</code>

* Operation: <code>"supportedStandards"</code>

* Remarks: This operation and method uses no paramters and returns a string of comma-separated list of string values. Each string value is a code for an NEP (or other standard) supported by the smart contract. The inclusion of a specific code in the list of comma-separated list of string values implies the smart contract supports all of the required operations and methods defined in the NEP that cooresponds with the code. Codes are specified with the lettercase native to the specification system. For NEP codes, the code format is "NEP-" (uppercase) followed by a integer (the NEP number) - not mixedcase or lowercase.

* Example: <code>"NEP-5"</code> implies the smart contract supports the required operations and methods for NEP-5 (an NEP-5 token).

* Example: <code>"NEP-5,NEP-1234"</code> implies the smart contract supports the required operations and methods for an NEP-5 token as well as the required operations and methods for NEP-1234 (a fictitious NEP). The NEP-1234 required operations and methods may be extensions to NEP-5 or they may represent an entirely unrelated, additional set of required operations and methods - jointly supported by the smart contract.

* Example: <code>"nep-5"</code>, <code>"NEP5"</code>, and <code>"nep5"</code> will generally be considered invalid responses unless "nep5", for example, is a valid code for a specification in a non-NEP specification system.

==Rationale==

The rationale for this design is similar to that for the <code>name</code>, <code>decimals</code>, <code>symbol</code> and <code>totalSupply</code> NEP-5 constant-valued operations and methods: simple, expressive, and straightforward to implement.

==Backwards Compatibility==

Support for NEP-[number to be assigned] by any particular smart contract is Optional. 
If a smart contract supports NEP-[number to be assigned], it is required that the smart contract support
<code>supportedStandards</code>.

If a smart contract does not support NEP-[number to be assigned], the <code>invokefunction</code> call should fail the way
it would normally fail if an <code>invokefunction</code> call refers to a method that is not implemented by 
the smart contract.

If a smart contact doesn't recognize the "supportedStandards" operation, the smart contract should return <code>false</code>

==Test Cases==

NEP-[number to be assigned] does not affect consensus changes. 

There are 2 levels of test cases: (i) does "supportedStandards" return a properly formatted string of comma-separated list of string values
and are the string values valid codes representing NEPs (and other standards); and (ii) does the smart contract 
implement the required operations and methods for the NEPs (and other standards) represented by the list of
codes in the comma-separated list of string values returned by the smart contract.

Codes returned by <code>supportedStandards</code> for NEPs should be of the format "NEP-" (uppercase) followed by a integer (the NEP number) - not mixedcase or lowercase.

==Implementation==

TODO The implementations must be completed before any NEP is given status "Final", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

TODO The authors are creating two independent smart contract implementations to validate NEP-[number to be assigned].
