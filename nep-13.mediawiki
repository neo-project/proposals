<pre>
  NEP: <to be assigned>
  Title: Smart Contract Source Mapping File
  Author: Sérgio Flores (@relfos), Ricardo Prado (@lock9), Alex  Fragapane(@afragapane) and Alex DiCarlo(dicarlo2)
  Type: Standard
  Status: Draft
  Created: 2019-03-07
</pre>

==Abstract==

This NEP-X creates a standard source mapping file format, used to map Smart Contract Opcodes into high-level programming language source code.

==Motivation==

In order to increase smart-contract debugging support, we need a source mapping standard that is programming language agnostic.

==Specification==

The NEO source mapping file specification is based on the existing Source Mapping revision 3, made by John Lenz and Nick Fitzgerald.
This reference can be found [here](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/preview#heading=h.1ce2c87bpj24).

====Terminology====

{|
! Term
! Definition
|-
| Generated Code
| The code which is generated by the compiler.
|-
| Original Source
| The source code which has not been passed through the compiler.
|-
| Base 64 VLQ
| The VLQ is a Base64 value, where the most significant bit (the 6th bit) is used as the continuation bit, and the “digits” are encoded into the string least significant first, and where the least significant bit of the first digit is used as the sign bit.
|-
| Source Mapping URL
| The URL referencing the location of a source map from the generated code.
|}


====File Format====
<pre>
<code>{
"version" : 3,
"file": "out.js",
"sourceRoot": "",
"sources": ["foo.js", "bar.js"],
"sourcesContent": [null, null],
"names": ["src", "maps", "are", "fun"],
"mappings": "A,AAAB;;ABCDE;"
}</code>
</pre>
<b>Line 1:</b> The entire file is a single JSON object
<br/>
<b>Line 2:</b> File version (always the first entry in the object) and must be a positive integer.
<br/>
<b>Line 3</b>: An optional name of the generated code that this source map is associated with.
<br/>
<b>Line 4:</b> An optional source root, useful for relocating source files on a server or removing repeated values in the “sources” entry.  This value is prepended to the individual entries in the “source” field.
<br/>
<b>Line 5:</b> A list of original sources used by the “mappings” entry.
<br/>
<b>Line 6:</b> An optional list of source content, useful when the “source” can’t be hosted. The contents are listed in the same order as the sources in line 5. “null” may be used if some original sources should be retrieved by name.
<br/>
<b>Line 7:</b> A list of symbol names used by the “mappings” entry.
</br>
<b>Line 8:</b> A string with the encoded mapping data.

The “mappings” data is broken down as follows:
<br/>
#  Each group representing a line in the generated file is separated by a ”;”
<br/>
#  Each segment is separated by a “,”
<br/>
#  Each segment is made up of 1,4 or 5 variable length fields.
<br/>

The fields in each segment are:
<br/>
# The zero-based starting column of the line in the generated code that the segment represents. If this is the first field of the first segment, or the first segment following a new generated line (“;”), then this field holds the whole base 64 VLQ. Otherwise, this field contains a base 64 VLQ that is relative to the previous occurrence of this field.
<br/>
<i>Note that this is different than the fields below because the previous value is reset after every generated line.</i>
<br/>
# If present, an zero-based index into the “sources” list. This field is a base 64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.
<br/>
# If present, the zero-based starting line in the original source represented. This field is a base 64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented. Always present if there is a source field.
<br/>
# If present, the zero-based starting column of the line in the source represented. This field is a base 64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented. Always present if there is a source field.
<br/>
# If present, the zero-based index into the “names” list associated with this segment. This field is a base 64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.

====Resolving sources====

If the sources are not absolute URLs after prepending of the “sourceRoot”, the sources are resolved relative to the SourceMap (like resolving script src in a html document).

====Encoding====

For simplicity, the character set encoding is always UTF-8.

====Notes====

Using file offsets were considered but rejected in favor of using line/column data to avoid becoming misaligned with the original due to platform specific line endings.


==Rationale==

This design will significantly reduce the debug map files and creating a NEP will allow different programming languages to be used with NEO debuggers.
@relfos who is the original author of neo-debugger-tools, raised the need of a standard, since a standard file format would allow the debugger to work with different programming languages, and not only C# and Python. To help with this task, @ricklock9 contacted @afragapane and @dicarlo2 and their collaboration resulted in the use of the Source Mapping revision 3.

This subject was also presented to CoZ slack and neo-debugger-tools GitHub.


==Backwards Compatibility==

The new file format will have a .map ending and won't replace the previous mapping files.
To avoid a sudden break in projects, we suggest current compatible compilers to also generate the old file format files for at least 3 months after this NEP is released.


==Implementation==

TODO: Adapt C# or Python implementation
