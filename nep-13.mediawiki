<pre>
  NEP: <to be assigned>
  Title: <NEP title>
  Author: <list of authors' names and optionally, email addresses>
  Type: <Standard | Informational | Meta>
  Status: Draft
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
  Requires (*optional): <NEP number(s)>
  Replaces (*optional): <NEP number(s)>
</pre>

==Abstract==

A short (~200 words) description of the technical issue being addressed.

==Motivation==

The motivation is critical for NEPs that want to change the NEO protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the NEP solves. NEP submissions without sufficient motivation may be rejected outright.

==Specification==

The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current NEO platforms.

==Rationale==

The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

==Backwards Compatibility==

All NEPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The NEP must explain how the author proposes to deal with these incompatibilities. NEP submissions without a sufficient backwards compatibility treatise may be rejected outright.

==Test Cases==

Test cases for an implementation are mandatory for NEPs that are affecting consensus changes. Other NEPs can choose to include links to test cases if applicable.

==Implementation==

The implementations must be completed before any NEP is given status "Final", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.
