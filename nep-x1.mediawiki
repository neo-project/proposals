<pre>
  NEP: Undefined
  Title: NFT Royalty Standard
  Author: Owen Zhang<zhangzhihong@ngd.neo.org>
  Type: Standard
  Status: Draft
  Created: 2022-09-05
</pre>

==Abstract==

This NEP defines a global standard to get royalty payment information for non-fungible tokens (NFTs) to enable support for royalty payments across all NFT marketplaces in the NEO Smart Economy.

==Motivation==

Need support royalty information which is not only for royalty payments across NFT marketplaces, but also good to protect creative copyright. Currently, no standard for creators to declare loyalty to all marketplaces in their NFTs. They have to discuss the loyalty with different marketplaces, otherwise these marketplaces which haven't touched with the creators can't get royalty details and have to define the loyalty in their marketplace contract by themselves. This standard is compatible with [https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki NEP-11]. 

==Specification==

===Common methods===

====royaltyInfo====

<pre>
{
  "name": "royaltyInfo",
  "safe": true,
  "parameters": [
    {
      "name": "tokenId",
      "type": "ByteString"
    },
    {
      "name": "salePrice",
      "type": "Integer"
    }
  ],
  "returntype": "Array"
}
</pre>

Returns a NeoVM Array stack item with two elements inside as this:

<pre>
[
    {
        "name":"royaltyRecipient",
        "type":"Hash160"
    },
    {
        "name":"royaltyAmount",
        "type":"Integer"
    }
]
</pre>

<code>royaltyRecipient</code> is the address of who should be sent the royalty payment, SHOULD be a 20-byte address.

<code>royaltyAmount</code>  Must be a percentage fixed point with a scaling factor of 100 (x/100). For example: "1000" for 10%.

This function is not for initial sale or mint, it's only for secondary marketplaces.

Marketplaces that support this method MAY implement any method of calculating or transferring royalties to the royalty recipient.

Marketplaces MUST pay the royalty in the same unit of exchange as that of the <code>salePrice</code> passed to royaltyInfo(). For example, if the sale price is in NEO, then the royalty payment must also be paid in NEO, and if the sale price is in GAS, then the royalty payment must also be paid in GAS.

The royaltyInfo() function MUST NOT ignore the <code>salePrice</code>, <code>royaltyAmount</code> MAY be dynamic due to <code>salePrice</code> and time. 

Marketplaces that support this standard MUST emit the event, <code>ReceivedRoyalties</code>, after sending a payment.

===Events===

====RoyaltiesTransferred====

<pre>
{
  "name": "RoyaltiesTransferred",
  "parameters": [
    {
      "name": "contractHash",
      "type": "Hash160"
    },
    {
      "name": "royaltyRecipient",
      "type": "Hash160"
    },
    {
      "name": "buyer",
      "type": "Hash160"
    },
    {
      "name": "tokenId",
      "type": "ByteString"
    },
    {
      "name": "amount",
      "type": "Integer"
    }
  ]
}
</pre>

<code>royaltyRecipient</code> MUST be the same address as that in <code>royaltyInfo</code> method.
MUST trigger after marketplaces transferring royalties to the royalty recipient if <code>royaltyInfo</code> method is implemented.


