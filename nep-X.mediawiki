<pre>
  NEP: <to be assigned>
  Title: Lightning-Voting
  Author: Vitor N. Coelho, Igor M.Coelho, Jeff Solinsky, et al. (join us!)
  Type: Standard
  Status: Draft
  Created: 2018-12-21
</pre>

==Abstract==

Massive decentralization has the cost of safety.
It is impossible to deny that in unlucky cases `M` (safety level) nodes can be Byzantine and attack the Blockchain.
While there are different types of possible attacks, some of them are easy to detect, such as: 1- blocks with wrong transactions; and 2- blocks with double-spending.
Considering this possibility, this NEP proposes a simple mechanism that allows voting to happen in an upper layer, namely, in the mempool.


==Motivation and Rationale==

After dBFT 2.0 was merged it is believed that no more natural forks will occur on the network.
Then, some additional safety mechanism should be implemented in order to boost massive decentralization.
Furthermore, in case that NEO holders detects missbehavior of CN they should be able to vote at any time.

In addition, in a "normal" scenario where `f+1` nodes lose acess to their private key the network could stuck.
In this sense, a mechanism should be prepared for the most adverse situation.

==Specification==

TO CHANGE after the idea of lightining voting.

A new message should be added, in which nodes can report the byzantine blocks.
Initially, there will be two types of possible bans:

* If the block contains wrong transactions all nodes that signed that blocked are automatically banned, removed as validators and losing their stake;
* If two/more blocks on a same height are reported, the longer branch (with, at least, more than `X` blocks. `X` should be defined in a safety manner. Maybe 2 blocks could be enough) will be defined as the correct chain and all signatures from the other branches will be banned.

In both cases the Blockchain will be deep reorganized and re-synced.

==Backwards Compatibility==

This NEP will be fully compatible.

However, it should be noticed that at any time of the history if votes are enough we could redesign the chain.

==Test Cases==

TODO

==Implementation==

TODO
