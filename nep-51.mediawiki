<pre>
  NEP: 51
  Title: Token Standard
  Author: Alan Fong (afong@cityofzion.io)
  Type: Standard
  Status: Draft
  Created: 2018-07-21
</pre>

==Abstract==

The NEP-51 Proposal outlines a token standard for the NEO blockchain that will provide systems with a generalized interaction mechanism for tokenized Smart Contracts.  This mechanic, along with the justification for each feature are defined.  A template and examples are also provided to enable the development community. This token standard includes all optional methods from the original NEP-5 as required.

==Motivation==

As the NEO blockchain scales, Smart Contract deployment and invocation will become increasingly important.  Without a standard interaction method, systems will be required to maintain a unique API for each contract, regardless of their similarity to other contracts.  Tokenized contracts present themselves as a prime example of this need because their basic operating mechanism is the same.  A standard method for interacting with these tokens relieves the entire ecosystem from maintaining a definition for basic operations that are required by every Smart Contract that employs a token.

==Specification==

In the method definitions below, we provide both the definitions of the functions as they are defined in the contract as well as the invoke parameters.

All methods are required in this standard.

===Methods===

====totalSupply====

<pre>
public static BigInteger totalSupply()
</pre>

Returns the total token supply deployed in the system.

====name====

<pre>
public static string name()
</pre>

Returns the name of the token. e.g. <code>"MyToken"</code>.

This method MUST always return the same value every time it is invoked.

====symbol====

<pre>
public static string symbol()
</pre>

Returns a short string symbol of the token managed in this contract. e.g. <code>"MYT"</code>. This symbol SHOULD be short (3-8 characters is recommended), with no whitespace characters or new-lines and SHOULD be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

This method MUST always return the same value every time it is invoked.

====decimals====

<pre>
public static byte decimals()
</pre>

Returns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.

This method MUST always return the same value every time it is invoked.

====balanceOf====

<pre>
public static BigInteger balanceOf(byte[] account)
</pre>

Returns the token balance of the <code>account</code>.

The parameter <code>account</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

If the <code>account</code> is an unused address, this method MUST return <code>0</code>.

====transfer====

<pre>
public static bool transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

Transfers an <code>amount</code> of tokens from the <code>from</code> account to the <code>to</code> account.

The parameters <code>from</code> and <code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

The parameter <code>amount</code> MUST be greater than or equal to <code>0</code>. If not, this method SHOULD <code>throw</code> an exception.

The function MUST return <code>false</code> if the <code>from</code> account balance does not have enough tokens to spend.

If the method succeeds, it MUST fire the <code>transfer</code> event, and MUST return <code>true</code>, even if the <code>amount</code> is <code>0</code>, or <code>from</code> and <code>to</code> are the same address.

The function SHOULD check whether the <code>from</code> address equals the caller contract hash. If so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL <code>Neo.Runtime.CheckWitness</code> to verify the transfer.

If the <code>to</code> address is a deployed contract, the function SHOULD check the <code>payable</code> flag of this contract to decide whether it should transfer the tokens to this contract.

If the transfer is not processed, the function SHOULD return <code>false</code>.

====allowance====

<pre>
public static BigInteger allowance(byte[] from, byte[] to)
</pre>

Returns the amount of tokens that the <code>to</code> account can transfer from the <code>from</code> account.

====transferFrom====

<pre>
public static bool transferFrom(byte[] originator, byte[] from, byte[] to, BigInteger amount)
</pre>

Transfers an <code>amount</code> from the <code>from</code> account to the <code>to</code> account if the <code>originator</code> has been approved to transfer the requested <code>amount</code>.

====approve====

<pre>
public static bool approve(byte[] originator, byte[] to, BigInteger amount)
</pre>

Approves the <code>to</code> account to transfer <code>amount</code> tokens from the <code>originator</code> account. 

===Events===

====transfer====

<pre>
public static event transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

The <code>transfer</code> event is raised after a successful execution of the <code>transfer</code> method.

A token contract which creates new tokens MUST trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.

A token contract which burns tokens MUST trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

==Implementation==

*Woolong: https://github.com/lllwvlvwlll/Woolong

*ICO Template: https://github.com/neo-project/examples/tree/master/ICO_Template
