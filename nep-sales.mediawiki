<pre>
  NEP: <to be assigned>
  Title: Token Sales Standard
  Author: Yak Jun Xiang (snowypowers@gmail.com)
  Type: Standard
  Status: Draft
  Created: 2018-03-16
  Requires: NEP-5
</pre>

==Abstract==

This NEP describes a set of methods that complements the NEP-5 proposal by introducing guidelines and methods that aids both the user and the organisation in the crowdsale process. These methods present a common standard that exposes the necessary information to the public in order to have a smooth crowdsale process.

==Motivation==

Initial Coin Offerings (ICOs) are often the main source of funding for blockchain projects. These offerings are conducted as a form of a crowdsale of tokens, allowing investors who have passed an off-chain verification process to contribute some of their assets for some tokens.

Token sales are currently conducted through general wallet software such as the Neon wallet offered by City of Zion. However, the best that the software can offer currently is a simple interface to create an transaction that sends the assets to the smart contract. This has resulted in a few scenarios:

1. Investors have attempted to send funds to a closed sale, resulting in lost funds. Some have been lucky to be able to retrieve their funds through support but some have been lost forever.

2. Investors have been seeking information from various sources but is unable to confirm or fully comprehend the information provided. It is also left to the investor to verify the accuracy of the information that they receive and trust that the smart contract reflects that information.

3. The software wallet is unable to independently verify the sales status and stop investors from sending their assets to a closed sales. ALthough the option is there, investors has no way to know if the sales is in process from the wallet.

4. The software wallet is unable to display any pre-conditions that the sales might enforce. For example, some sales might require whitelisting and the investor has to rely on an external source to ensure that his address is properly whitelisted. There is no indication of that on the sales panel.

This proposal tackles the mentioned issues by proposing a standard set of methods that wallets can implement to provide investors with the visibility and confidence when contributing. With the proposed set of methods, the wallet can independently verify the sale status, providing the investor with confidence in the sales.

It is noted that the above issues are all tackled by using verification and having the contract reject transactions. However, this is a very unfriendly way of rejection with no clarity of the reason of rejection given to the investor. With this proposal, we hope that the token sales experience will be smooth and painless. This proposal is not an excuse to not implement verification as it is still the better option to implement.

==Specification==

We propose the following methods to be implemented in any token contract that is conducting a public sales.

===Methods===

====saleStatus====

* Syntax: <code>public static bool saleStatus()</code>

* Remarks: ''saleStatus'' returns the current state of the sale. Returns true if sale is active.

====saleDetails====

* Syntax: <code>public static string saleDetails(byte[] address)</code>

* Remarks: ''saleDetails'' returns a string that briefly describes the sale. The argument '''(address)''' can be made optional by passing in an empty byte array. If no argument is passed in, the method should return a message meant for anyone to read. If an address is passed in, the method may return a custom message specific for the address. The message should be a human-readable string and is left to the contract owner to decide what he wishes to display. This string is meant for the wallet software to display in order to convey some information to the users.

* Example: For a registered address, at block 1000, the call to ''saleDetails'' will return the following string: <code>1 NEO -> 100 TOKENS (till block 2000)</code>. At block 2001, the call to ''saleDetails'' will return the following string: <code>1 NEO -> 50 TOKENS</code>. At block 3000, the sale has ended, the call to ''saleDetails'' will return the following string: <code>Sale Ended</code>. For all non-registered addresses, the call will return the following string: <code>~TOKEN~ Find us at www.token.com!</code>

===Events===

There are no events that are associated with this standard.

==Implementation==

TBD
