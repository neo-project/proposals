<pre>
  NEP: 5
  Title: Token Standard
  Author: Tyler Adams <lllwvlvwlll@gmail.com>, luodanwg <luodan.wg@gmail.com>, tanyuan <tanyuan666@gmail.com>, Alan Fong <afong@cityofzion.io>
  Type: Standard
  Status: Final
  Created: 2017-08-10
</pre>

==Abstract==

The NEP-5 Proposal outlines a token standard for the NEO blockchain that will provide systems with a generalized interaction mechanism for tokenized Smart Contracts.  This mechanic, along with the justification for each feature are defined.  A template and examples are also provided to enable the development community.

==Motivation==

As the NEO blockchain scales, Smart Contract deployment and invocation will become increasingly important.  Without a standard interaction method, systems will be required to maintain a unique API for each contract, regardless of their similarity to other contracts.  Tokenized contracts present themselves as a prime example of this need because their basic operating mechanism is the same.  A standard method for interacting with these tokens relieves the entire ecosystem from maintaining a definition for basic operations that are required by every Smart Contract that employs a token.


==Methods==

====totalSupply====

<pre>
public static BigInteger totalSupply()
</pre>

<b>Definition:</b> 
Returns the total token supply deployed in the system.

----
====name====

<pre>
public static string name()
</pre>

<b>Definition:</b> 

Returns the name of the token. e.g. <code>"MyToken"</code>.

<b>Remarks:</b>

# This method <b>MUST</b> always return the same value every time it is invoked.

----
====symbol====

<pre>
public static string symbol()
</pre>

<b>Definition:</b>

Returns a short string symbol of the token managed in this contract. e.g. <code>"MYT"</code>. 

<b>Remarks:</b>

# This symbol <b>SHOULD</b> be short (3-8 characters is recommended), with no whitespace characters or new-lines and <b>SHOULD</b> be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).
# This method <b>MUST</b> always return the same value every time it is invoked.

----
====decimals====

<pre>
public static byte decimals()
</pre>

<b>Definition:</b>

Returns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.

<b>Remarks:</b>

# This method <b>MUST</b> always return the same value every time it is invoked.

----
====balanceOf====

<pre>
public static BigInteger balanceOf(byte[] address)
</pre>

<b>Definition:</b> 

Returns the token balance of the <code>address</code>.

<b>Remarks:</b>

# The parameter <code>address</code> <b>SHOULD</b> be a 20-byte address. If not, this method <b>SHOULD</b> <code>throw</code> an exception.
# If the <code>address</code> is an unused address, this method <b>MUST</b> return <code>0</code>.

----
====transfer====

<pre>
public static bool transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

<b>Definition:</b> 

Transfers an <code>amount</code> of tokens from the <code>from</code> address to the <code>to</code> address.

<b>Remarks:</b>

# The parameters <code>from</code> and <code>to</code> <b>SHOULD</b> be 20-byte addresses. If not, this method <b>SHOULD</b> <code>throw</code> an exception.
# The parameter <code>amount</code> <b>MUST</b> be greater than or equal to <code>0</code>. If not, this method <b>SHOULD</b> <code>throw</code> an exception.
# The method <b>MUST</b> return <code>false</code> if the <code>from</code> address balance does not have enough tokens to spend.
# If the method succeeds, it <b>MUST</b> fire the <code>transfer</code> event, and <b>MUST</b> return <code>true</code>, even if the <code>amount</code> is <code>0</code>, or <code>from</code> and <code>to</code> are the same address.
# The method <b>SHOULD</b> check whether the <code>from</code> address equals the caller contract hash. If so, the transfer <b>SHOULD</b> be processed; If not, the method <b>SHOULD</b> use the SYSCALL <code>Neo.Runtime.CheckWitness</code> to verify the transfer.
# If the <code>to</code> address is a deployed contract, the method <b>SHOULD</b> check the <code>payable</code> flag of this contract to decide whether it should transfer the tokens to this contract.
# If the transfer is not processed, the method <b>SHOULD</b> return <code>false</code>.

----
====approve====

<pre>
public static bool approve(byte[] originator, byte[] to, BigInteger amount)
</pre>

<b>Definition:</b> 

Approves the <code>to</code> address to transfer <code>amount</code> tokens from the <code>originator</code> account.

<b>Remarks:</b>

# The parameters <code>originator</code> and <code>to</code> <b>SHOULD</b> be 20-byte addresses.  If not, this method <b>SHOULD</b> throw an exception.
# The parameter <code>amount</code> <b>MUST</b> be greater than or equal to <code>0</code>.  If not, this method <b>SHOULD</b> throw an exception.
# The method <b>SHOULD</b> check whether the <code>originator</code> address equals the caller contract hash. If so, the allowance <b>SHOULD</b> be processed; If not, the method <b>SHOULD</b> use the SYSCALL Neo.Runtime.CheckWitness to verify the allowance.
# If the <code>to</code> address is a deployed contract, the method <b>SHOULD</b> check the <code>payable</code> flag of this contract to decide wheter it should allow token transfer to this contract.

----
====allowance====

<pre>
public static BigInteger allowance(byte[] from, byte[] to)
</pre>

<b>Definition:</b>

Returns the amount of tokens that the <code>to</code> address can transfer from the <code>from</code> account.

<b>Remarks:</b>

# The parameters <code>from</code> and <code>to</code> <b>SHOULD</b> be a 20-byte address.  If not, this method <b>SHOULD</b> <code>throw</code> and exception.
# If either <code>from</code> or <code>to</code> are unused, the method <b>MUST</b> return <code>0</code>.

----
====transferFrom====

<pre>
public static bool transferFrom(byte[] originator, byte[] from, byte[] to, BigInteger amount)
</pre>

<b>Definition:</b>

Transfers an <code>amount</code> from the <code>from</code> address to the <code>to</code> account if the <code>originator</code> has been approved to transfer the requested <code>amount</code>.

<b>Remarks:</b>

# The parameters <code>originator</code>, <code>from</code>, and <code>to</code> <b>SHOULD</b> by 20-byte addresses.  If not, this method <b>SHOULD</b> <code>throw</code> and exception.
# The <code>amount</code> parameter <b>MUST</b> be greater than or equal to <code>0</code>. If not, this method <b>SHOULD</b> <code>throw</code> and exception.
# The method <b>MUST</b> return <code>false</code> if the <code>from</code> address does not have enough tokens to spend.
# The method <b>MUST</b> return <code>false</code> if <code>amount</code> is less than either the <code>allowance</code> or the balance of the <code>from</code> address.
# If the method succeeds, it <b>MUST</b> fire the transfer event, and <b>MUST</b> return true, even if the amount is 0, or from and to are the same address.
# The method <b>SHOULD</b> check whether the <code>originator</code> address equals the caller contract hash. If so, the transfer <b>SHOULD</b> be processed; If not, the method <b>SHOULD</b> use the SYSCALL Neo.Runtime.CheckWitness to verify the transfer.
# If the transfer is not processed, the method <b>SHOULD</b> return false.

==Events==

====transfer====

<pre>
public static event transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

<b>Definition:</b>

An event which is emitted on a token transfer event.

<b>Remarks:</b>

# <b>MUST</b> trigger when tokens are transferred, including zero value transfers.
# A token contract which creates new tokens <b>MUST</b> trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.
# A token contract which burns tokens <b>MUST</b> trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

==Implementations==

* NEO ICO Template(C#): https://github.com/neo-project/examples/tree/master/ICO_Template
* NEX ICO Template(Python): https://github.com/neonexchange/neo-ico-template
* Moonlight ICO Template(C#): https://github.com/Moonlight-io/moonlight-ico-template
