<pre>
  NEP: <to be assigned>
  Title: Security Token Standard
  Author: Drey Ng <drey@liquefy.com>, Zhuofang Li <sougiyo@gmail.com>, Zhuo Qian <qianzhuo@ngd.neo.org>
  Type: Standard
  Status: Draft
  Created: 2019-06-17
  Requires: NEP-5
</pre>

==Abstract==

This NEP outlines a security token standard for the NEO Smart Economy that will provide an international interaction mechanism for tokenized securities. Templates and examples are provided for the developer community.

==Motivation==

Digital Assets have always been one of the major focuses of NEO. With the advancement of NEO 3.0, it is expected that there will be increasing demand on real world asset securitization on blockchain. There are different types of security tokens (ST), such as private shares, closed-end funds and real estate. A standard is necessary for ST interactions (e.g. issuance, distribution and exchange) in the ecosystem since they have the same core operating mechanisms (e.g. compliance, investor profiling).

==Specification==

A concept of <code>Main-Sub Standard</code> is introduced. The Security Token Standard is composed of a <code>Main Standard</code> and a <code>Sub Standard</code> related to the <code>Main Standard</code>. The <code>Main Standard</code> defines all of the functionalities of the security token, such as managing the issuer information, managing investors, managing shareholders, defining the ST and managing tranches. The <code>Sub Standard</code> is fully compatible with NEP-5 and defines all of the functionalities of a tranche of the ST defined by the <code>Main Standard</code> (e.g. a tranche of ST having the voting right). ST contracts conforming to the <code>Main Standard</code> are called <code>Main Contracts</code>. Contracts conforming to the <code>Sub Standard</code> are called <code>Sub Contracts</code>. A <code>Main Contract</code> may have multiple <code>Sub Contracts</code>. All the assets defined by <code>Sub Contracts</code> together make up an ST asset defined by the <code>Main Contract</code>.

The definitions of methods and parameters of the <code>Main-Sub Standard</code> are provided below. The categorization is based on the stage of a security token offering and application scenario.

===Main Standard Methods===

====Issuer Document Information====

Mainly for managing related documents of the issuer.

=====setDocument=====

<pre>
public static bool setDocument(string name, byte[] document)
</pre>

Adds a new document to the contract storage. <code>name</code> is the key and <code>document</code> is the value.

Only the contract owner can call this method.

<code>document</code> is the serialized value of a defined class <code>Document</code>. The definition of this class is outside of this standard. A sample definition is shown below (Implementations may vary):

<pre>
class Document
{
  public string name; // the name of the document
  public string uri; // the uri where the human readable document is stored
  public byte[] hash; // the hash of the document
  public BigInteger timestamp; // the time when the document is last modified
}
</pre>

This method MUST <code>throw</code> an exception if the document is not successfully stored.

This method MUST fire a <code>DocumentUpdated</code> event with details of the document being attached or modified.

=====getDocument=====

<pre>
public static byte[] getDocument(string name)
</pre>

Returns the serialized value of a defined class <code>Document</code> as explained above with a known <code>name</code>.

This method MUST return an empty byte array if <code>name</code> is not in the contract storage.

=====removeDocument=====

<pre>
public static bool removeDocument(string name)
</pre>

Removes an existing document from the contract with a known <code>name</code>.

Only the contract owner can call this method.

This method MUST <code>throw</code> an exception if the document is not successfully removed.

This method MUST emit a <code>DocumentRemoved</code> event with details of the document being attached or modified.

====Shareholder Information====

Mainly for configuring shareholder information.

=====setShareholderMaxAmount=====

<pre>
public static bool setShareholderMaxAmount(BigInteger amount)
</pre>

Sets the maximum number of shareholders.

Only the contract owner can call this method.

The parameter <code>amount</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

This method MUST fire the <code>ShareholderMaxAmountUpdated</code> event.

=====getShareholderAmount=====

<pre>
public static BigInteger getShareholderAmount()
</pre>

Returns the current number of shareholders.

=====addShareholder=====

<pre>
public static bool addShareholder(byte[] shareholder, bool isOriginal)
</pre>

Adds a new shareholder. The method is called after the fundraising of the STO closes.

Only the contract owner can call this method.

The parameter <code>shareholder</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

If the current number of shareholders exceeds the max shareholder amount, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>shareholder</code> had already been added.

If the method succeeds, it MUST fire the <code>ShareholderAdded</code> event and return true.

=====removeShareholder=====

<pre>
public static bool removeShareholder(byte[] shareholder)
</pre>

Removes a shareholder from the contract.

Only the contract owner can call this method.

The parameter <code>shareholder</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>shareholder</code> had not already been added.

If the method succeeds, it MUST fire the <code>ShareholderRemoved</code> event and return true.

====Investor Information====

Mainly for configuring investor information and handling whitelist and blacklist.

=====setInvestorInfo=====

<pre>
public static bool setInvestorInfo(byte[] address, byte[] investor)
</pre>

Sets or updates investor information.

Only the contract owner can call this method.

<code>investor</code> is the serialized value of a defined class <code>Investor</code>. The definition of this class is outside of this standard. Investor information includes name of investor, country of residence of investor, KYC information, investor type (retail or accredited) and etc. A sample definition is shown below (Implementations may vary):

<pre>
class Investor
{
  public string name;
  public string country;
  public string type;
  ...
}
</pre>

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

If the method succeeds, it MUST fire the <code>InvestorInfoUpdated</code> event and return true.

=====getInvestorInfo=====

<pre>
public static byte[] getInvestorInfo(byte[] address)
</pre>

Retrieves investor information.

The parameter <code>address</code> SHOULD be 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

This method SHOULD return an empty byte array if the investor information for <code>address</code> had not already been added.

=====removeInvestorInfo=====

<pre>
public static bool removeInvestorInfo(byte[] address)
</pre>

Removes investor information.

Only the contract owner can call this method.

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the investor information of this <code>address</code> had not already been added.

If the method succeeds, it MUST fire the <code>InvestorInfoUpdated</code> event and return true.

=====addInvestorsToWhitelist=====

<pre>
public static bool addInvestorsToWhitelist(byte[][] addresses)
</pre>

Adds investors to the trading white list. Only investors in the white list are allowed to trade.

Only the contract owner can call this method.

The parameter <code>addresses</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>addresses</code> is already in the white list.

If the method succeeds, it MUST fire the <code>WhitelistAdded</code> event and return true.

=====removeInvestorsFromWhitelist=====

<pre>
public static bool removeInvestorsFromWhitelist(byte[][] addresses)
</pre>

Removes investors from the whitelist. Investors removed from the whitelist are no longer able to trade.

Only the contract owner can call this method.

The parameter <code>addresses</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>addresses</code> is not in the white list.

If the method succeeds, it MUST fire the <code>WhitelistRemoved</code> event and return true.

=====addInvestorsToBlacklist=====

<pre>
public static bool addInvestorsToBlacklist(byte[][] addresses)
</pre>

Adds investors to the trading black list. Investors in the black list are banned from trading.

Only the contract owner can call this method.

The parameter <code>addresses</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>addresses</code> is already in the black list.

If the method succeeds, it MUST fire the <code>BlacklistAdded</code> event and return true.

=====removeInvestorsFromBlacklist=====

<pre>
public static bool removeInvestorsFromBlacklist(byte[][] addresses)
</pre>

Removes investors from blacklist. Removing investors from the black list does not mean that they are able to trade. Only investors in the white list are allowed to trade.

Only the contract owner can call this method.

The parameter <code>addresses</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>addresses</code> is not in the black list.

If the method succeeds, it MUST fire the <code>BlacklistRemoved</code> event and return true.

====Compliance====

=====checkInvestorInWhitelist=====

<pre>
public static bool checkInvestorInWhitelist(byte[] address)
</pre>

Checks if an investor is in the whitelist (investors who passed KYC, AML and accreditation AND approved by asset owners).

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>address</code> is not in whitelist.

=====checkInvestorInBlacklist=====

<pre>
public static bool checkInvestorInBlacklist(byte[] address)
</pre>

Checks if an investor is in the blacklist (investors who are banned from trading).

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the parameter <code>address</code> is in the black list.

=====checkTransferCompliance=====

<pre>
public static bool checkTransferCompliance(byte[] address, BigInteger amount)
</pre>

Checks if the transfer of <code>amount</code> from the <code>address</code> is allowed by compliance.

The method SHOULD be called in the <code>canTransfer</code> method of a <code>Sub Contract</code>.

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

The parameter <code>amount</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

====Token management====

=====setToken=====

<pre>
public static bool setToken(string tokenTag, byte[] scriptHash)
</pre>

Adds a specific token contract script hash with a <code>tokenTag</code> to the <code>Main Contract</code> storage as a key-value pair. <code>tokenTag</code> is the key and <code>scriptHash</code> is the value.

Only the contract owner can call this method.

The parameter <code>tokenTag</code> represents a specific attribute of a tranche of the ST (e.g. tokenTag="a" means these tokens has no voting right while tokenTag="b" does.) and is defined by the ST issuer.

The parameter <code>scriptHash</code> SHOULD be a 20-byte contract script hash. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the parameter <code>tokenTag</code> is already in the contract storage.

If the method succeeds, it MUST fire the <code>TokenUpdated</code> event and return true.

=====getToken=====

<pre>
public static byte[] getToken(string tokenTag)
</pre>

Returns a specific token script hash with <code>tokenTag</code> from the <code>Main Contract</code> storage.

The method MUST return an empty byte array if the parameter <code>tokenTag</code> is not in the contract storage.

=====removeToken=====

<pre>
public static bool removeToken(byte tokenTag)
</pre>

Removes a specific token with <code>tokenTag</code> from the contract.

Only the contract owner can call this method.

The method MUST return false if the parameter <code>tokenTag</code> does not exist in the contract.

If the method succeeds, it MUST fire the <code>TokenRemoved</code> event.

=====balanceOfAll=====

<pre>
public static BigInteger balanceOfAll(byte[] account)
</pre>

Returns the balance of all token tranches of the <code>account</code>.

The parameter <code>account</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

If the <code>account</code> is an unused address, this method MUST return 0.

===Main Standard Events===

====Document events====

=====DocumentUpdated=====

<pre>
public static event DocumentUpdated(string name, byte[] document)
</pre>

MUST be triggered when a new document is added or modified.

=====DocumentRemoved=====

<pre>
public static event DocumentRemoved(string name)
</pre>

MUST be triggered when a document is removed.

====Shareholder events====

=====ShareholderMaxAmountUpdated=====

<pre>
public static event ShareholderMaxAmountUpdate(BigInteger oldAmount, BigInteger newAmount)
</pre>

MUST be triggered when the maximum number of shareholders is set.

=====ShareholderAdded=====

<pre>
public static event ShareholderAdded(byte[] shareholder, bool isOriginal)
</pre>

MUST be triggered when the initial shareholders and new shareholders (buyers from secondary market) are set.

=====ShareholderRemoved=====

<pre>
public static event ShareholderRemoved(byte[] shareholder)
</pre>

MUST be triggered when a shareholder is removed.

====Investor events====

=====InvestorInfoUpdated=====

<pre>
public static event InvestorInfoUpdated(byte[] address, byte[] investor)
</pre>

MUST be triggered when investor information is updated.

=====InvestorInfoRemoved=====

<pre>
public static event InvestorInfoRemoved(byte[] address)
</pre>

MUST be triggered when investor information is removed.

=====WhitelistAdded=====

<pre>
public static event WhitelistAdded(bytes[][] addresses)
</pre>

MUST be triggered when new investors are added to the whitelist.

=====WhitelistRemoved=====

<pre>
public static event WhitelistRemoved(bytes[][] addresses)
</pre>

MUST be triggered when investors are removed from the whitelist.

=====BlacklistAdded=====

<pre>
public static event BlacklistAdded(bytes[][] addresses)
</pre>

MUST be triggered when investors are added to the black list.

=====BlacklistRemoved=====

<pre>
public static event BlacklistRemoved(bytes[][] addresses)
</pre>

MUST be triggered when investors are removed from the black list.

====Token Management Events====

=====TokenUpdated=====

<pre>
public static event TokenUpdated(string tokenTag, byte[] scriptHash)
</pre>

MUST be triggered when a token smart contract is added or updated.

=====TokenRemoved=====

<pre>
public static event TokenRemoved(byte tokenTag)
</pre>

MUST be triggered when a token smart contract is removed from contract.

===Sub Standard Methods===

The ST issuer needs to divide and assign different attributes to the assets which need to be securitized, such as shares with or without voting rights, shares with or without dividend rights. <code>Sub Contracts</code> are created based on those assets with different attributes and are related to the <code>Main Contract</code>. Those <code>Sub Contracts</code> are NEP-5 compatible and can be extended with any necessary APIs.

====NEP-5 Methods====

NEP-5 compatible methods.

=====totalSupply=====

<pre>
public static BigInteger totalSupply()
</pre>

Returns the total token supply deployed.

=====name=====

<pre>
public static string name()
</pre>

Returns the name of the token. e.g. "MyToken".

This method MUST always return the same value every time it is invoked.

=====symbol=====

<pre>
public static string symbol()
</pre>

Returns a short string symbol of the token managed in this contract. e.g. "MYT". This symbol SHOULD be short (3-8 characters is recommended), with no whitespace characters or new-lines and SHOULD be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

This method MUST always return the same value every time it is invoked.

=====decimals=====

<pre>
public static byte decimals()
</pre>

Returns the number of decimals used by the token - e.g. 8, means to divide the token amount by 100,000,000 to get its user representation.

This method MUST always return the same value every time it is invoked.

=====balanceOf=====

<pre>
public static BigInteger balanceOf(byte[] account)
</pre>

Returns the token balance of the <code>account</code>.

The parameter <code>account</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

If the <code>account</code> is an unused address, this method MUST return 0.

=====transfer=====

<pre>
public static bool transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

Transfers an amount of tokens from the <code>from</code> account to the <code>to</code> account.

The parameters <code>from</code> and <code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

The parameter <code>amount</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the <code>from</code> account does not have enough tokens to spend.

If the method succeeds, it MUST fire the <code>Transfer</code> event, and MUST return true, even if the amount is 0, or from and to are the same address.

The method SHOULD check whether the from address equals the caller contract hash. If so, the transfer SHOULD be processed; If not, the method SHOULD use the <code>SYSCALL Neo.Runtime.CheckWitness</code> to verify the transfer.

If the to address is a deployed contract, the method SHOULD check the payable flag of this contract to decide whether it should transfer the tokens to this contract.

If the transfer is not processed, the method SHOULD return false.

====Methods added====

=====tokenTag=====

<pre>
public static string tokenTag()
</pre>

Returns the token tag string of this tranche of token.

This method MUST always return the same value every time it is invoked.

=====description=====

<pre>
public static string description()
</pre>

Returns a detailed desription of this tranche of token, mainly about the assets and rights (e.g. voting, dividend rights) related to this tranche of token.

=====canTransfer=====

<pre>
public static byte canTransfer(byte[] from, byte[] to, BigInteger amount)
</pre>

Returns a status code of the transfer status. This method is used for checking the validity of transactions by means of the compliance protocol. After all the checking rules are passed, a success status code is returned. Otherwise, a specific error status code will be returned for caller to get the reason of failure.

This method SHOULD call <code>checkTransferCompliance</code> in the <code>Main Contract</code> as one of the checking rules.

The parameters <code>from</code> and <code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

The parameter <code>amount</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

=====mint=====

<pre>
public static bool mint(byte[][] accounts, BigInteger[] amounts, uint[] lockupPeriods )
</pre>

Mints specific amount of token for the <code>accounts</code>.

Only the contract owner can call this method.

The parameters <code>accounts</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The elements of the parameter <code>amounts</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

The elements of the parameter <code>lockupPeriods</code> MUST be greater than or equal to 0 of each element. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the elements of  <code>accounts</code> is not in the whitelist.

If the method succeeds, it MUST fire the <code>Minted</code> and <code>Transfer</code> events and return true.

=====burn=====

<pre>
public static bool burn(byte[][] accounts, BigInteger[] amounts, uint[] lockupPeriods)
</pre>

Burns specific amount of token from the <code>account</code>.

Only the contract owner can call this method.

The parameter <code>accounts</code> SHOULD be a 20-byte address array. If not, this method SHOULD <code>throw</code> an exception.

The elements of the parameter <code>amounts</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

The elements of the parameter <code>lockupPeriods</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the elements of <code>accounts</code> is not in the whitelist.

If the method succeeds, it MUST fire the <code>Burned</code> and <code>Transfer</code> events and return true.

=====revertTransfer=====

<pre>
public static bool revertTransfer(byte[] txid, byte[] from, byte[] to, BigInteger amount)
</pre>

Reverts the specific transfer according to <code>txid</code>. The <code>amount</code> may be different from the amount in the transaction of <code>txid</code>.

Only the contract owner can call this method.

The parameters <code>txid</code> SHOULD be transaction id byte array. If not, this method SHOULD <code>throw</code> an exception.

The parameters <code>from</code> and <code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

The parameter <code>amount</code> MUST be greater than or equal to 0. If not, this method SHOULD <code>throw</code> an exception.

The method MUST return false if the parameters <code>from</code> and <code>to</code> are not in the whitelist.

If the method succeeds, it MUST fire the <code>Transfer</code> event and <code>RevertTransfer</code> event and return true.

=====freezeTransfers=====

<pre>
public static void freezeTransfers()
</pre>

Freezes all transfer transactions. (e.g. sets the <code>IsFrozen</code> flag to true.)

Only the contract owner can call this method.

If the method succeeds, it MUST fire the <code>TransfersFrozen</code> event.

=====unfreezeTransfers=====

<pre>
public static void unfreezeTransfers()
</pre>

Unfreezes all transfer transactions. (e.g. sets the <code>IsFrozen</code> flag to false.)

Only the contract owner can call this method.

If the method succeeds, it MUST fire the <code>TransfersUnfrozen</code> event.

===Sub Standard Events===

====NEP-5 events====

=====Transfer=====

<pre>
public static event Transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

MUST be triggered when tokens are transferred, including zero value transfers.

A token contract which creates new tokens MUST trigger a transfer event with the from address set to null when tokens are created.

A token contract which burns tokens MUST trigger a transfer event with the to address set to null when tokens are burned.

====Events Added====

=====Minted=====

<pre>
public static event Minted(byte[][] accounts, BigInteger[] amounts, uint[] lockupPeriods)
</pre>

MUST be triggered when tokens are minted to corresponding investors.

=====Burned=====

<pre>
public static event Burned(byte[][] accounts, BigInteger[] amounts, uint[] lockupPeriods)
</pre>

MUST be triggered when tokens are burned from corresponding investors.

=====RevertTransfer=====

<pre>
public static event RevertTransfer(byte[] txid, byte[] from, byte[] to, BigInteger amount)
</pre>

MUST be triggered when a transfer is reverted.

=====TransfersFrozen=====

<pre>
public static event TransfersFrozen()
</pre>

MUST be triggered when freezeTransfers is called.

=====TransfersUnfrozen=====

<pre>
public static event TransfersUnfrozen()
</pre>

MUST be triggered when unfreezeTransfers is called.

==Implementations==

TBD
